{"version":3,"sources":["Position.js","App.js","serviceWorker.js","index.js"],"names":["randomPos","WrappedComponent","props","state","position","top","Math","floor","random","left","this","React","Component","fadeIn","el","findDOMNode","TweenMax","fromTo","opacity","eff3d","to","transformOrigin","scaleX","scaleY","force3D","yoyo","repeat","ease","Power1","easeInOut","ExtendImg","style","src","alt","ExtendLab","App","count","increment","bind","setState","children","i","push","key","className","type","onClick","id","title","moveImage","object","document","getElementById","x","y","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAScA,EAAY,SAACC,GACxB,yDACI,WAAYC,GAAO,IAAD,8BAClB,cAAMA,IACDC,MAAO,CACLC,SAAW,CACKC,IAAI,GAAD,OAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UAApB,MACHC,KAAK,GAAD,OAAIH,KAAKC,MAAoB,IAAdD,KAAKE,UAApB,QALT,EADtB,qDAWG,OAAO,kBAACP,EAAD,iBAAsBS,KAAKR,MAA3B,CAAkCE,SACjCM,KAAKP,MAAMC,gBAZtB,GAA+BO,IAAMC,YAqB3BC,EAAS,SAACZ,GACrB,yLAEU,IAAMa,EAAGC,sBAAYL,MACnBM,IAASC,OAAOH,EAAG,EAAE,EAAE,CAEpBI,QAAQ,GAEb,CACCA,QAAQ,MARnB,+BAeS,OAAO,kBAACjB,EAAqBS,KAAKR,WAf3C,GAA4BS,IAAMC,YAwBvBO,EAAQ,SAAClB,GACnB,yLAEY,IAAMa,EAAGC,sBAAYL,MACrBM,IAASI,GAAGN,EAAG,EAAE,CAACO,gBAAgB,yBAClCL,IAASI,GAAGN,EAAG,GAAI,CACbQ,OAAO,GACPC,OAAO,GACPC,SAAQ,EACRC,MAAK,EACLC,QAAQ,EACRC,KAAKC,IAAOC,cAV9B,+BAeU,OAAO,kBAAC5B,EAAqBS,KAAKR,WAf5C,GAA2BS,IAAMC,YC7B9BkB,G,MAAYX,EAAMN,EAAOb,GArBd,SAACE,GAClB,OACU,yBACM6B,MAAO7B,EAAME,SACb4B,IAAI,qBAAqBC,IAAI,WAkBvCC,EAAYf,EAAMN,EAAOb,GAZhB,SAACE,GACR,OACQ,2BACG6B,MAAO7B,EAAME,UADhB,4BAoED+B,E,kDAnDb,WAAYjC,GAAO,IAAD,8BAClB,cAAMA,IACDC,MAAM,CAEEiC,MAAM,GAInB,EAAKC,UAAU,EAAKA,UAAUC,KAAf,gBARG,E,wDAahB5B,KAAK6B,SAAS,CAELH,MAAM1B,KAAKP,MAAMiC,MAAM,M,+BAU5B,IADN,IAAMI,EAAS,GACDC,EAAE,EAAGA,EAAE/B,KAAKP,MAAMiC,MAAOK,IAC9BD,EAASE,KAAK,kBAACZ,EAAD,CAAWa,IAAKF,KAC9BD,EAASE,KAAK,kBAACR,EAAD,CAAWS,IAAKF,EAAE,OAGzC,OAKA,yBAAKG,UAAU,aACf,uDAIMJ,EAEF,4BAAQK,KAAK,SAASC,QAASpC,KAAK2B,WAApC,YACA,yBAAKL,IAAI,oBAAoBe,GAAG,OAAOd,IAAI,GAAGe,MAAM,UAAUF,QAASG,S,GA5C1DtC,IAAMC,WAsDzB,SAASqC,IACP,IAAIC,EAASC,SAASC,eAAe,QACjCC,EAAI/C,KAAKC,MAAoB,IAAdD,KAAKE,UACpB8C,EAAIhD,KAAKC,MAAoB,IAAdD,KAAKE,UACxB0C,EAAOnB,MAAM1B,IAAMgD,EAAI,KACvBH,EAAOnB,MAAMtB,KAAO6C,EAAI,KClFNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASV,SAASC,eAAe,SD4H3C,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6526fe2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { findDOMNode } from 'react-dom';\r\nimport TweenMax,{ Power1 }from \"gsap\";\r\n//import Power1 from 'gsap';\r\n\r\n\r\n// Position Random Position\r\n\r\n\r\nexport  const randomPos = (WrappedComponent) =>{\r\n   return class RandomPos extends React.Component {\r\n       constructor(props){\r\n       super(props);\r\n       this.state ={\r\n              position : {\r\n                              top:`${Math.floor(Math.random()*100)}vh`,\r\n                              left:`${Math.floor(Math.random()*100)}vw` \r\n              }};\r\n}\r\n\r\nrender(){\r\n      return <WrappedComponent {...this.props} position = \r\n             {this.state.position}/>\r\n\r\n}\r\n   };\r\n}\r\n\r\n//const ref=React.createReF()\r\n// Fade the Image Animation\r\n\r\nexport const fadeIn = (WrappedComponent) =>{\r\n  return class Fadein extends React.Component {\r\n      componentDidMount(){                   \t     \r\n            const el=findDOMNode(this)\r\n              TweenMax.fromTo(el,0,3,{\r\n           \r\n                 opacity:0,\r\n            },\r\n            {\r\n            \topacity:1\r\n            }\r\n            );\r\n  \t}\r\n\r\nrender(){\r\n        \t\r\n           return <WrappedComponent {...this.props}   />\r\n\r\n};\r\n}\r\n}  \r\n\r\n///Pulse Animation\r\n\r\n\r\nexport const eff3d = (WrappedComponent) =>{\r\n   return class Eff3d extends React.Component{\r\n        componentDidMount(){\r\n               const el=findDOMNode(this);             \r\n               TweenMax.to(el,0,{transformOrigin:'center center -150px'});\r\n               TweenMax.to(el,0.5,{\r\n                     scaleX:0.8,\r\n                     scaleY:0.8,\r\n                     force3D:true,\r\n                     yoyo:true,\r\n                     repeat:-1,\r\n                     ease:Power1.easeInOut\r\n\r\n               }); \r\n         }\r\n         render(){\r\n         \t   return <WrappedComponent {...this.props}   />      \r\n         };\r\n}\r\n}\r\n","import React from 'react';\nimport { randomPos,fadeIn,eff3d  } from './Position';\nimport './App.css';\n\n   \n\n//Image Component\nconst StranImg = (props) =>{\nreturn (\n          <img \n                style={props.position}\n                src=\"/Images/strand.jpg\" alt=\"\"\n                                    \n                />\n)\n}\n \n const Label = (props) =>{\n        return(\n                <label\n                   style={props.position}\n                                 \n                   >WE STRAND TOGETHER </label>\n)\n}\n\n\n\nconst ExtendImg = eff3d(fadeIn(randomPos(StranImg )))\nconst ExtendLab = eff3d(fadeIn(randomPos(Label)))\n\n\n\n//// Main Function Component call the ExtendImg Wrapped\n\nclass  App extends React.Component {\n  constructor(props){\n  super(props)\n  this.state={\n               \n               count:0\n                \n  }\n  \n  this.increment=this.increment.bind(this)\n  }\n  \n\nincrement(){\n    this.setState({\n\n             count:this.state.count+1\n\n    })\n\n\n} \n    render(){\n  \n\n  const children=[];\n        for(let i=0; i<this.state.count; i++){         \n           children.push(<ExtendImg key={i} />);\n           children.push(<ExtendLab key={i+500} />);        \n      }\n        \n  return (\n    \n            \n\n\n  <div className=\"container\">\n  <h2>Animation Strand Palace</h2>\n  \n  \n     \n      { children }\n      \n      <button type=\"button\" onClick={this.increment}  >Press Me</button>             \n      <img src=\"/Images/smile.jpg\" id=\"item\" alt=\"\" title=\"Clik me\" onClick={moveImage} />\n    \n  </div> \n        \n     \n  );\n}\n}\nexport default App;\n\nfunction moveImage(){\n  var object = document.getElementById('item');\n  var x = Math.floor(Math.random()*700);\n  var y = Math.floor(Math.random()*700);\n  object.style.top = x + 'px';\n  object.style.left = y + 'px';\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}